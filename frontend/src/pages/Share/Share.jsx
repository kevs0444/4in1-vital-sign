import React, { useState, useEffect, useRef } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import "./Share.css";
import shareIcon from "../../assets/icons/share-icon.png";
import { QRCodeSVG } from "qrcode.react";
import { sensorAPI } from "../../utils/api";

export default function Share() {
  const navigate = useNavigate();
  const location = useLocation();
  const [isVisible, setIsVisible] = useState(false);
  const [selectedOption, setSelectedOption] = useState("");
  const [isSharing, setIsSharing] = useState(false);
  const [shareComplete, setShareComplete] = useState(false);
  const [userData, setUserData] = useState({});
  const [phone, setPhone] = useState("");
  const [showQR, setShowQR] = useState(false);
  const [isResetting, setIsResetting] = useState(false);
  const [resetProgress, setResetProgress] = useState(0);
  const [isPrinting, setIsPrinting] = useState(false);

  const qrRef = useRef();

  useEffect(() => {
    // Get all collected data from location state
    if (location.state) {
      setUserData(location.state);
    }
    
    // Animation trigger
    const timer = setTimeout(() => {
      setIsVisible(true);
    }, 100);

    return () => clearTimeout(timer);
  }, [location.state]);

  const calculateBMI = () => {
    if (!userData.weight || !userData.height) return null;
    const heightInMeters = userData.height / 100;
    return (userData.weight / (heightInMeters * heightInMeters)).toFixed(1);
  };

  const getBMICategory = (bmi) => {
    if (bmi < 18.5) return "Underweight";
    if (bmi < 25) return "Normal weight";
    if (bmi < 30) return "Overweight";
    return "Obese";
  };

  const generateHealthSummary = () => {
    const bmi = calculateBMI();
    return `
VitalSign AI Health Report

Personal Information:
Name: ${userData.firstName} ${userData.lastName}
Age: ${userData.age} years
Sex: ${userData.sex === 'male' ? 'Male' : 'Female'}

Vital Signs:
Weight: ${userData.weight} kg
Height: ${userData.height} cm
BMI: ${bmi}
Body Temperature: ${userData.temperature}°C
Heart Rate: ${userData.heartRate} BPM
Blood Oxygen: ${userData.spo2}%
Respiratory Rate: ${userData.respiratoryRate}/min

Measured on: ${new Date().toLocaleDateString()}
Generated by: Four-in-One Vital Sign Sensor
    `.trim();
  };

  const generateReceiptContent = () => {
    const bmi = calculateBMI();
    const bmiCategory = bmi ? getBMICategory(parseFloat(bmi)) : "N/A";
    const currentDate = new Date().toLocaleDateString();
    const currentTime = new Date().toLocaleTimeString();

    return `
================================
    VITAL SIGN HEALTH REPORT
================================

Patient: ${userData.firstName} ${userData.lastName}
Age: ${userData.age} years | Sex: ${userData.sex === 'male' ? 'M' : 'F'}
Date: ${currentDate}
Time: ${currentTime}

--------------------------------
         VITAL SIGNS
--------------------------------
Weight: ${userData.weight || '--'} kg
Height: ${userData.height || '--'} cm
BMI: ${bmi || '--'} (${bmiCategory})

Temperature: ${userData.temperature || '--'} °C
Heart Rate: ${userData.heartRate || '--'} BPM
Blood Oxygen: ${userData.spo2 || '--'} %
Respiratory Rate: ${userData.respiratoryRate || '--'}/min

--------------------------------
    HEALTH STATUS SUMMARY
--------------------------------
${generateHealthStatusSummary()}

================================
   FOUR-IN-ONE VITAL SENSOR
    Automated Health Check
================================

Thank you for using our service!
For medical advice, please consult
a healthcare professional.

`.trim();
  };

  const generateHealthStatusSummary = () => {
    const summaries = [];
    
    if (userData.heartRate) {
      if (userData.heartRate < 60) summaries.push("• Heart rate: Low (Bradycardia)");
      else if (userData.heartRate > 100) summaries.push("• Heart rate: High (Tachycardia)");
      else summaries.push("• Heart rate: Normal");
    }
    
    if (userData.spo2) {
      if (userData.spo2 < 95) summaries.push("• Oxygen: Low (Hypoxemia)");
      else summaries.push("• Oxygen: Normal");
    }
    
    if (userData.temperature) {
      if (userData.temperature > 37.5) summaries.push("• Temperature: Fever");
      else if (userData.temperature < 36.1) summaries.push("• Temperature: Low");
      else summaries.push("• Temperature: Normal");
    }
    
    const bmi = calculateBMI();
    if (bmi) {
      summaries.push(`• BMI: ${getBMICategory(parseFloat(bmi))}`);
    }
    
    return summaries.length > 0 ? summaries.join('\n') : "• Complete measurements for analysis";
  };

  const simulatePrintReceipt = async () => {
    setIsPrinting(true);
    
    try {
      // Simulate receipt printing process
      const receiptContent = generateReceiptContent();
      console.log("Receipt content ready for printing:", receiptContent);
      
      // Here you would integrate with your thermal printer API
      // For FlashLabel 58MM printer, you might use:
      // await printToThermalPrinter(receiptContent);
      
      // Simulate printing delay
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      setIsPrinting(false);
      setShareComplete(true);
      
    } catch (error) {
      console.error("Printing error:", error);
      setIsPrinting(false);
      alert("Printing failed. Please try again.");
    }
  };

  const simulateSMSSending = async () => {
    if (!phone) {
      alert("Please enter a phone number");
      return;
    }

    setIsSharing(true);
    
    try {
      // Simulate SMS sending process
      const smsContent = `Your VitalSign Health Report is ready! Visit us to get your detailed results. Measured on ${new Date().toLocaleDateString()}`;
      console.log("SMS content:", smsContent);
      console.log("Sending to:", phone);
      
      // Here you would integrate with your SMS gateway API
      // await sendSMS(phone, smsContent);
      
      // Simulate SMS sending delay
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setIsSharing(false);
      setShareComplete(true);
      
    } catch (error) {
      console.error("SMS sending error:", error);
      setIsSharing(false);
      alert("SMS sending failed. Please try again.");
    }
  };

  const handleShareProcess = () => {
    if (!selectedOption) {
      alert("Please select a sharing method");
      return;
    }

    switch (selectedOption) {
      case 'sms':
        simulateSMSSending();
        break;
      case 'receipt':
        simulatePrintReceipt();
        break;
      case 'qr':
        setShareComplete(true);
        break;
      default:
        break;
    }
  };

  const handleBack = () => {
    navigate("/saving");
  };

  const handleSkip = () => {
    navigate("/result", { state: userData });
  };

  const handleRetry = () => {
    setSelectedOption("");
    setShareComplete(false);
    setPhone("");
    setShowQR(false);
  };

  const downloadQRCode = () => {
    const canvas = qrRef.current.querySelector("canvas");
    if (canvas) {
      const pngUrl = canvas.toDataURL("image/png");
      const downloadLink = document.createElement("a");
      downloadLink.href = pngUrl;
      downloadLink.download = `health-report-${userData.firstName}-${userData.lastName}.png`;
      document.body.appendChild(downloadLink);
      downloadLink.click();
      document.body.removeChild(downloadLink);
    }
  };

  const handleDoneAndLeave = async () => {
    setIsResetting(true);
    
    try {
      // Step 1: Shutdown all sensors
      setResetProgress(25);
      await sensorAPI.shutdownSensors();
      
      // Step 2: Reset all measurements in backend
      setResetProgress(50);
      await sensorAPI.resetMeasurements();
      
      // Step 3: Disconnect from Arduino
      setResetProgress(75);
      await sensorAPI.disconnect();
      
      // Step 4: Wait a moment for complete reset
      setResetProgress(90);
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Step 5: Navigate to standby with fresh state
      setResetProgress(100);
      setTimeout(() => {
        navigate("/standby", { 
          replace: true,
          state: { 
            systemReset: true,
            resetTimestamp: new Date().toISOString()
          }
        });
      }, 500);
      
    } catch (error) {
      console.error("Error during system reset:", error);
      // Still navigate to standby even if some steps fail
      setTimeout(() => {
        navigate("/standby", { 
          replace: true,
          state: { 
            systemReset: true,
            resetWithErrors: true
          }
        });
      }, 1000);
    }
  };

  const handleViewResults = () => {
    navigate("/result", { state: userData });
  };

  const getShareStatusMessage = () => {
    if (isPrinting) return "Printing receipt...";
    if (isSharing && selectedOption === 'sms') return "Sending SMS...";
    if (shareComplete) {
      switch (selectedOption) {
        case 'sms': return "SMS sent successfully!";
        case 'receipt': return "Receipt printed successfully!";
        case 'qr': return "QR Code generated successfully!";
        default: return "Shared successfully!";
      }
    }
    return "Choose how you'd like to receive your health report";
  };

  return (
    <div className="share-container">
      <div className={`share-content ${isVisible ? 'visible' : ''}`}>
        
        {/* Header */}
        <div className="share-header">
          <div className="share-icon">
            <img src={shareIcon} alt="Share Results" />
          </div>
          <h1 className="share-title">
            {isResetting ? "Resetting System..." : 
             shareComplete ? "Success!" : "Get Your Results"}
          </h1>
          <p className="share-subtitle">
            {isResetting 
              ? "Preparing system for next user..."
              : getShareStatusMessage()
            }
          </p>
        </div>

        {/* Sharing Options */}
        {!shareComplete && !isResetting && !isPrinting && !isSharing && (
          <div className="sharing-options">
            <h2 className="options-title">Select Output Method</h2>
            
            <div className="options-grid">
              {/* SMS Option */}
              <div 
                className={`option-card ${selectedOption === 'sms' ? 'selected' : ''}`}
                onClick={() => setSelectedOption('sms')}
              >
                <div className="option-icon">💬</div>
                <div className="option-info">
                  <h3>SMS Text</h3>
                  <p>Send summary via text message</p>
                </div>
                <div className="option-check">
                  {selectedOption === 'sms' && '✓'}
                </div>
              </div>

              {/* Receipt Option */}
              <div 
                className={`option-card ${selectedOption === 'receipt' ? 'selected' : ''}`}
                onClick={() => setSelectedOption('receipt')}
              >
                <div className="option-icon">🧾</div>
                <div className="option-info">
                  <h3>Print Receipt</h3>
                  <p>58MM thermal printer receipt</p>
                </div>
                <div className="option-check">
                  {selectedOption === 'receipt' && '✓'}
                </div>
              </div>

              {/* QR Code Option */}
              <div 
                className={`option-card ${selectedOption === 'qr' ? 'selected' : ''}`}
                onClick={() => {
                  setSelectedOption('qr');
                  setShowQR(true);
                }}
              >
                <div className="option-icon">🔲</div>
                <div className="option-info">
                  <h3>QR Code</h3>
                  <p>Generate digital QR code</p>
                </div>
                <div className="option-check">
                  {selectedOption === 'qr' && '✓'}
                </div>
              </div>
            </div>

            {/* SMS Input */}
            {selectedOption === 'sms' && (
              <div className="input-section">
                <label htmlFor="phone" className="input-label">
                  Phone Number
                </label>
                <input
                  type="tel"
                  id="phone"
                  className="share-input"
                  placeholder="+1 (555) 123-4567"
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                />
              </div>
            )}

            {/* Receipt Preview */}
            {selectedOption === 'receipt' && (
              <div className="receipt-preview">
                <div className="receipt-preview-content">
                  <h4>Receipt Preview</h4>
                  <div className="receipt-content">
                    <pre>{generateReceiptContent()}</pre>
                  </div>
                  <p className="receipt-notice">
                    This will be printed on 58MM thermal paper
                  </p>
                </div>
              </div>
            )}

            {/* QR Code Display */}
            {selectedOption === 'qr' && showQR && (
              <div className="qr-section" ref={qrRef}>
                <div className="qr-code-container">
                  <QRCodeSVG 
                    value={generateHealthSummary()}
                    size={200}
                    level="H"
                    includeMargin={true}
                  />
                </div>
                <p className="qr-instruction">
                  Scan this QR code to view the health report
                </p>
                <button 
                  className="download-qr-button"
                  onClick={downloadQRCode}
                >
                  Download QR Code
                </button>
              </div>
            )}
          </div>
        )}

        {/* Sharing/Printing Animation */}
        {(isSharing || isPrinting) && (
          <div className="sharing-animation">
            <div className="sharing-progress">
              <div className="progress-ring">
                <div className="ring-background"></div>
                <div className="ring-progress"></div>
              </div>
              <div className="sharing-status">
                <span className="status-text">
                  {isPrinting 
                    ? "Printing your receipt..." 
                    : "Sending SMS..."}
                </span>
                <span className="status-subtext">
                  {isPrinting 
                    ? "Please wait while we print your health report" 
                    : "Sending health summary to your phone"}
                </span>
              </div>
            </div>
          </div>
        )}

        {/* Share Complete */}
        {shareComplete && !isResetting && (
          <div className="share-complete">
            <div className="success-animation">
              <div className="success-icon">✅</div>
              <div className="success-rings">
                <div className="ring ring-1"></div>
                <div className="ring ring-2"></div>
              </div>
            </div>
            <div className="complete-message">
              <h3>Success!</h3>
              <p>
                {selectedOption === 'sms' && "SMS sent to your phone!"}
                {selectedOption === 'receipt' && "Receipt printed successfully!"}
                {selectedOption === 'qr' && "QR Code generated!"}
              </p>
            </div>
          </div>
        )}

        {/* System Reset Animation */}
        {isResetting && (
          <div className="system-reset-animation">
            <div className="reset-progress-container">
              <div className="reset-spinner">
                <div className="spinner-circle"></div>
                <div className="spinner-orbits">
                  <div className="orbit orbit-1"></div>
                  <div className="orbit orbit-2"></div>
                  <div className="orbit orbit-3"></div>
                </div>
              </div>
              
              <div className="reset-progress-bar">
                <div 
                  className="reset-progress-fill"
                  style={{ width: `${resetProgress}%` }}
                ></div>
              </div>
              
              <div className="reset-status">
                <span className="status-text">Resetting System for Next User</span>
                <span className="status-subtext">
                  {resetProgress < 25 && "Shutting down sensors..."}
                  {resetProgress >= 25 && resetProgress < 50 && "Resetting measurements..."}
                  {resetProgress >= 50 && resetProgress < 75 && "Disconnecting hardware..."}
                  {resetProgress >= 75 && "Preparing for next user..."}
                </span>
                <span className="progress-percent">{resetProgress}%</span>
              </div>
            </div>
          </div>
        )}

        {/* Action Buttons */}
        <div className="share-actions">
          {!isSharing && !shareComplete && !isResetting && !isPrinting && (
            <>
              <button 
                className="back-button"
                onClick={handleBack}
              >
                Back
              </button>
              
              <button 
                className="skip-button"
                onClick={handleSkip}
              >
                Skip
              </button>
              
              <button 
                className="share-button"
                onClick={handleShareProcess}
                disabled={!selectedOption || (selectedOption === 'sms' && !phone)}
              >
                {selectedOption === 'receipt' ? '🖨️ Print Receipt' : 
                 selectedOption === 'sms' ? '📱 Send SMS' : 
                 '🔲 Generate QR'}
              </button>

              {/* Done and Leave Button */}
              <button 
                className="done-button"
                onClick={handleDoneAndLeave}
              >
                ✅ Done & Reset
              </button>
            </>
          )}
          
          {shareComplete && !isResetting && (
            <div className="post-share-actions">
              <button 
                className="view-results-button"
                onClick={handleViewResults}
              >
                View Detailed Results
              </button>
              <button 
                className="done-button"
                onClick={handleDoneAndLeave}
              >
                ✅ Done & Reset
              </button>
            </div>
          )}

          {isResetting && (
            <div className="reset-message">
              <span className="reset-text">
                System will be ready for the next user shortly...
              </span>
            </div>
          )}

          {!isSharing && !shareComplete && !isResetting && !isPrinting && selectedOption && (
            <button 
              className="retry-button"
              onClick={handleRetry}
            >
              Change Method
            </button>
          )}
        </div>

        {/* Privacy Notice */}
        <div className="privacy-notice">
          <div className="privacy-icon">🔒</div>
          <div className="privacy-text">
            <strong>Your Privacy Matters</strong>
            <span>All health data is secure and confidential</span>
          </div>
        </div>

        {/* System Reset Notice */}
        <div className="system-notice">
          <div className="system-icon">🔄</div>
          <div className="system-text">
            <strong>System Reset</strong>
            <span>Click "Done & Reset" to clear all data and prepare for next user</span>
          </div>
        </div>
      </div>
    </div>
  );
}